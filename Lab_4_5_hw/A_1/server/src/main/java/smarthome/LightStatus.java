//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package smarthome;

public class LightStatus implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public int brightness;

    public Color color;

    public LightStatus()
    {
        this.color = Color.RED;
    }

    public LightStatus(int brightness, Color color)
    {
        this.brightness = brightness;
        this.color = color;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LightStatus r = null;
        if(rhs instanceof LightStatus)
        {
            r = (LightStatus)rhs;
        }

        if(r != null)
        {
            if(this.brightness != r.brightness)
            {
                return false;
            }
            if(this.color != r.color)
            {
                if(this.color == null || r.color == null || !this.color.equals(r.color))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::smarthome::LightStatus");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, brightness);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, color);
        return h_;
    }

    public LightStatus clone()
    {
        LightStatus c = null;
        try
        {
            c = (LightStatus)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.brightness);
        Color.ice_write(ostr, this.color);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.brightness = istr.readInt();
        this.color = Color.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LightStatus v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LightStatus ice_read(com.zeroc.Ice.InputStream istr)
    {
        LightStatus v = new LightStatus();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LightStatus> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LightStatus v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LightStatus> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LightStatus.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LightStatus _nullMarshalValue = new LightStatus();

    /** @hidden */
    public static final long serialVersionUID = -8766566626936391549L;
}
