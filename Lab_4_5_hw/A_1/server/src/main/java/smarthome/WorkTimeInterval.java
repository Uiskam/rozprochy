//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package smarthome;

public class WorkTimeInterval implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public String beginWork;

    public String endWork;

    public WorkTimeInterval()
    {
        this.beginWork = "";
        this.endWork = "";
    }

    public WorkTimeInterval(String beginWork, String endWork)
    {
        this.beginWork = beginWork;
        this.endWork = endWork;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        WorkTimeInterval r = null;
        if(rhs instanceof WorkTimeInterval)
        {
            r = (WorkTimeInterval)rhs;
        }

        if(r != null)
        {
            if(this.beginWork != r.beginWork)
            {
                if(this.beginWork == null || r.beginWork == null || !this.beginWork.equals(r.beginWork))
                {
                    return false;
                }
            }
            if(this.endWork != r.endWork)
            {
                if(this.endWork == null || r.endWork == null || !this.endWork.equals(r.endWork))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::smarthome::WorkTimeInterval");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, beginWork);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, endWork);
        return h_;
    }

    public WorkTimeInterval clone()
    {
        WorkTimeInterval c = null;
        try
        {
            c = (WorkTimeInterval)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.beginWork);
        ostr.writeString(this.endWork);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.beginWork = istr.readString();
        this.endWork = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, WorkTimeInterval v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public WorkTimeInterval ice_read(com.zeroc.Ice.InputStream istr)
    {
        WorkTimeInterval v = new WorkTimeInterval();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<WorkTimeInterval> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, WorkTimeInterval v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<WorkTimeInterval> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(WorkTimeInterval.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final WorkTimeInterval _nullMarshalValue = new WorkTimeInterval();

    /** @hidden */
    public static final long serialVersionUID = -2713805407642771874L;
}
